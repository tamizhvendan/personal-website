---
title: "Announcing a book series - How I Solve It Using Clojure"
date: 2024-10-29
tags: ['blog', 'clojure']
description: ""
---
<h2 id="why-am-i-writing-this%3F" tabindex="-1">Why Am I Writing this?</h2>
<p>I fell in love with programming at the age of 12, and I am one of the luckiest people on the planet to have their hobby as a profession.</p>
<p>In my fifteen-year professional career, I have been fortunate to work with 11 different programming languages and develop 20+ software products using them.</p>
<p>Among those 11 programming languages, Clojure is my favorite and go-to language. It's my favorite for these two main reasons.</p>
<ul>
  <li>
    <p>
      <strong>Frictionless Mental Model Translation</strong> - Software design is the <a href="https://core.ac.uk/download/pdf/229585288.pdf">process</a> of conceptualizing how a software system will work before it is implemented or modified. When solving a problem using Clojure, I experience zero friction in translating my mental models into code. It just fits seamlessly.</p>
  </li>
  <li>
    <p>
      <strong>Faster Feedback Loop</strong> - We often fail our way to success during software development. We write a piece of logic and then run the application to verify it. If the logic is first of its kind (like calling third-party HTTP APIs or DB calls), more often than not, it won't work in the very first iteration. We use a debugger with breakpoints or print statements across the codebase to make sense of what is happening and do the necessary course corrections to get a job done. When using Clojure, I don't rely on any of these. Thanks to its interactive programming environment, I get instant feedback on my logic without wasting any time in the Yak shaving.</p>
  </li>
</ul>
<p>These two reasons help me tremendously in achieving the flow state. As Csíkszentmihályi <a href="https://www.goodreads.com/book/show/66354.Flow">explained</a> it, flow is "a state in which people are so involved in an activity that nothing else seems to matter; the experience is so enjoyable that people will continue to do it even at great cost, for the sheer sake of doing it."</p>
<p>I love developing software using Clojure, and it is hard to express it in words.</p>
<p>In the classic literature, <a href="https://en.wikipedia.org/wiki/Tirumantiram">Tirumantiram</a>, there is a beautiful poem that has this golden line</p>
<p>யான் பெற்ற இன்பம் பெறுக இவ்வையகம் (Yaam petra inbam peruga ivvaiyagam)</p>
<p>It means, Let the world also experience the pleasure/joy/happiness that I experience in my life.</p>
<p>It is the objective of this book series.</p>
<h2 id="the-saas-product-idea" tabindex="-1">The SAAS Product Idea</h2>
<p>The book centers on the following Software as a Service (SaaS) product idea: building an online platform for teachers and coaches to conduct assessments.</p>
<p>They should be able to set up their question bank and conduct online tests by selectively choosing the questions from it. The students can attend these online tests and submit their answers. The platform should facilitate this entire process, evaluate the answers, and score them.</p>
<h2 id="how-this-book-series-is-organized" tabindex="-1">How this book series is organized</h2>
<p>This book series will be of three parts</p>
<ul>
  <li>
    <strong>Part 1</strong> - A shorter one that captures how I set up my Clojure projects and write pure domain logic decoupled from persistence and IO operations.</li>
  <li>
    <strong>Part 2</strong> - This part concentrates on the web application side of the product. It will build on top of the domain logic developed in Part 1 and build an end-to-end full-stack application.</li>
  <li>
    <strong>Part 3</strong> - The final part covers further application enhancements like new features, extending existing features, billing, and feature entitlements. This part captures how a product written in Clojure evolves after achieving product-market fit and traction.</li>
</ul>
<h2 id="who-this-book-is-for" tabindex="-1">Who this book is for</h2>
<p>This book series assumes that you already know the basics of Clojure. If you aspire to learn more about how to build an end-to-end application using Clojure and evolve it to accommodate future requirements, then this book is for you!</p>
<p>I have already started writing the first part and will likely self-publish it on Christmas Eve. Please subscribe using the form below to keep yourself updated on the progress.</p>
{% include "forms/how-i-solve-it-using-clojure-waitlist-form.html" %}

<h2 id="my-clojure-works" tabindex="-1">My Clojure Works</h2>
<p>If you are hearing about me for the first time and wants to know more about my clojure works, do check the following links</p>
<ul>
  <li>
    <a href="/tags/clojure">My Clojure Blog Posts</a>
  </li>
  <li>
    <a href="https://www.youtube.com/watch?v=Kj0Z0MJlfD4">User Group Talk</a> - How I built an E commerce Marketplace Middleware in Clojure
  </li>
  <li>
    <a href="https://github.com/graphqlize/honeyeql">HoneyEQL</a> - An open source Clojure library that I developed to query database using the EDN Query Language.
  </li>
</ul>